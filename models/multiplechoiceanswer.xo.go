// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	uuid "github.com/satori/go.uuid"
)

// MultipleChoiceAnswer represents a row from 'public.multiple_choice_answers'.
type MultipleChoiceAnswer struct {
	ID         uuid.UUID `json:"id"`          // id
	QuestionID uuid.UUID `json:"question_id"` // question_id
	Answer     string    `json:"answer"`      // answer
	Correct    bool      `json:"correct"`     // correct

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MultipleChoiceAnswer exists in the database.
func (mca *MultipleChoiceAnswer) Exists() bool {
	return mca._exists
}

// Deleted provides information if the MultipleChoiceAnswer has been deleted from the database.
func (mca *MultipleChoiceAnswer) Deleted() bool {
	return mca._deleted
}

// Insert inserts the MultipleChoiceAnswer to the database.
func (mca *MultipleChoiceAnswer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mca._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.multiple_choice_answers (` +
		`id, question_id, answer, correct` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, mca.ID, mca.QuestionID, mca.Answer, mca.Correct)
	err = db.QueryRow(sqlstr, mca.ID, mca.QuestionID, mca.Answer, mca.Correct).Scan(&mca.ID)
	if err != nil {
		return err
	}

	// set existence
	mca._exists = true

	return nil
}

// Update updates the MultipleChoiceAnswer in the database.
func (mca *MultipleChoiceAnswer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mca._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mca._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.multiple_choice_answers SET (` +
		`question_id, answer, correct` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, mca.QuestionID, mca.Answer, mca.Correct, mca.ID)
	_, err = db.Exec(sqlstr, mca.QuestionID, mca.Answer, mca.Correct, mca.ID)
	return err
}

// Save saves the MultipleChoiceAnswer to the database.
func (mca *MultipleChoiceAnswer) Save(db XODB) error {
	if mca.Exists() {
		return mca.Update(db)
	}

	return mca.Insert(db)
}

// Upsert performs an upsert for MultipleChoiceAnswer.
//
// NOTE: PostgreSQL 9.5+ only
func (mca *MultipleChoiceAnswer) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if mca._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.multiple_choice_answers (` +
		`id, question_id, answer, correct` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, question_id, answer, correct` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.question_id, EXCLUDED.answer, EXCLUDED.correct` +
		`)`

	// run query
	XOLog(sqlstr, mca.ID, mca.QuestionID, mca.Answer, mca.Correct)
	_, err = db.Exec(sqlstr, mca.ID, mca.QuestionID, mca.Answer, mca.Correct)
	if err != nil {
		return err
	}

	// set existence
	mca._exists = true

	return nil
}

// Delete deletes the MultipleChoiceAnswer from the database.
func (mca *MultipleChoiceAnswer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mca._exists {
		return nil
	}

	// if deleted, bail
	if mca._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.multiple_choice_answers WHERE id = $1`

	// run query
	XOLog(sqlstr, mca.ID)
	_, err = db.Exec(sqlstr, mca.ID)
	if err != nil {
		return err
	}

	// set deleted
	mca._deleted = true

	return nil
}

// MultipleChoiceQuestion returns the MultipleChoiceQuestion associated with the MultipleChoiceAnswer's QuestionID (question_id).
//
// Generated from foreign key 'multiple_choice_answers_question_id_fkey'.
func (mca *MultipleChoiceAnswer) MultipleChoiceQuestion(db XODB) (*MultipleChoiceQuestion, error) {
	return MultipleChoiceQuestionByID(db, mca.QuestionID)
}

// MultipleChoiceAnswerByID retrieves a row from 'public.multiple_choice_answers' as a MultipleChoiceAnswer.
//
// Generated from index 'multiple_choice_answers_pkey'.
func MultipleChoiceAnswerByID(db XODB, id uuid.UUID) (*MultipleChoiceAnswer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, question_id, answer, correct ` +
		`FROM public.multiple_choice_answers ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	mca := MultipleChoiceAnswer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mca.ID, &mca.QuestionID, &mca.Answer, &mca.Correct)
	if err != nil {
		return nil, err
	}

	return &mca, nil
}
