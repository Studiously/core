// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// ClassroomRole is the 'classroom_role' enum type from schema 'public'.
type ClassroomRole uint16

const (
	// ClassroomRoleStudent is the 'student' ClassroomRole.
	ClassroomRoleStudent = ClassroomRole(1)

	// ClassroomRoleModerator is the 'moderator' ClassroomRole.
	ClassroomRoleModerator = ClassroomRole(2)

	// ClassroomRoleTeacher is the 'teacher' ClassroomRole.
	ClassroomRoleTeacher = ClassroomRole(3)

	// ClassroomRoleAdministrator is the 'administrator' ClassroomRole.
	ClassroomRoleAdministrator = ClassroomRole(4)
)

// String returns the string value of the ClassroomRole.
func (cr ClassroomRole) String() string {
	var enumVal string

	switch cr {
	case ClassroomRoleStudent:
		enumVal = "student"

	case ClassroomRoleModerator:
		enumVal = "moderator"

	case ClassroomRoleTeacher:
		enumVal = "teacher"

	case ClassroomRoleAdministrator:
		enumVal = "administrator"
	}

	return enumVal
}

// MarshalText marshals ClassroomRole into text.
func (cr ClassroomRole) MarshalText() ([]byte, error) {
	return []byte(cr.String()), nil
}

// UnmarshalText unmarshals ClassroomRole from text.
func (cr *ClassroomRole) UnmarshalText(text []byte) error {
	switch string(text) {
	case "student":
		*cr = ClassroomRoleStudent

	case "moderator":
		*cr = ClassroomRoleModerator

	case "teacher":
		*cr = ClassroomRoleTeacher

	case "administrator":
		*cr = ClassroomRoleAdministrator

	default:
		return errors.New("invalid ClassroomRole")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for ClassroomRole.
func (cr ClassroomRole) Value() (driver.Value, error) {
	return cr.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for ClassroomRole.
func (cr *ClassroomRole) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid ClassroomRole")
	}

	return cr.UnmarshalText(buf)
}
