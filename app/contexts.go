// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "studiously": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/studiously/core/design
// --out=$(GOPATH)/src/github.com/studiously/core
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/satori/go.uuid"
	"net/http"
	"strconv"
)

// ListClassContext provides the class list action context.
type ListClassContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListClassContext parses the incoming request URL and body, performs validations and creates the
// context used by the class controller list action.
func NewListClassContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListClassContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListClassContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListClassContext) OK(r StudiouslyClassCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/studiously.class+json; type=collection")
	if r == nil {
		r = StudiouslyClassCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListClassContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListClassContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowClassContext provides the class show action context.
type ShowClassContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ClassID uuid.UUID
}

// NewShowClassContext parses the incoming request URL and body, performs validations and creates the
// context used by the class controller show action.
func NewShowClassContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowClassContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowClassContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := uuid.FromString(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowClassContext) OK(r *StudiouslyClass) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/studiously.class+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowClassContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowClassContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowMembersClassContext provides the class show_members action context.
type ShowMembersClassContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ClassID uuid.UUID
}

// NewShowMembersClassContext parses the incoming request URL and body, performs validations and creates the
// context used by the class controller show_members action.
func NewShowMembersClassContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowMembersClassContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowMembersClassContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := uuid.FromString(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowMembersClassContext) OK(r StudiouslyMemberCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/studiously.member+json; type=collection")
	if r == nil {
		r = StudiouslyMemberCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowMembersClassContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowMembersClassContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowQuestionsClassContext provides the class show_questions action context.
type ShowQuestionsClassContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Answered     *bool
	AuthorID     *uuid.UUID
	ClassID      uuid.UUID
	QuestionType *string
	UnitID       *uuid.UUID
}

// NewShowQuestionsClassContext parses the incoming request URL and body, performs validations and creates the
// context used by the class controller show_questions action.
func NewShowQuestionsClassContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowQuestionsClassContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowQuestionsClassContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAnswered := req.Params["answered"]
	if len(paramAnswered) > 0 {
		rawAnswered := paramAnswered[0]
		if answered, err2 := strconv.ParseBool(rawAnswered); err2 == nil {
			tmp3 := &answered
			rctx.Answered = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("answered", rawAnswered, "boolean"))
		}
	}
	paramAuthorID := req.Params["author_id"]
	if len(paramAuthorID) > 0 {
		rawAuthorID := paramAuthorID[0]
		if authorID, err2 := uuid.FromString(rawAuthorID); err2 == nil {
			tmp4 := &authorID
			rctx.AuthorID = tmp4
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("author_id", rawAuthorID, "uuid"))
		}
	}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := uuid.FromString(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "uuid"))
		}
	}
	paramQuestionType := req.Params["question_type"]
	if len(paramQuestionType) > 0 {
		rawQuestionType := paramQuestionType[0]
		rctx.QuestionType = &rawQuestionType
	}
	paramUnitID := req.Params["unit_id"]
	if len(paramUnitID) > 0 {
		rawUnitID := paramUnitID[0]
		if unitID, err2 := uuid.FromString(rawUnitID); err2 == nil {
			tmp6 := &unitID
			rctx.UnitID = tmp6
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("unit_id", rawUnitID, "uuid"))
		}
	}
	return &rctx, err
}

// OKFeed sends a HTTP response with status code 200.
func (ctx *ShowQuestionsClassContext) OKFeed(r StudiouslyQuestionFeedCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/studiously.question+json; type=collection")
	if r == nil {
		r = StudiouslyQuestionFeedCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowQuestionsClassContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowQuestionsClassContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowQuestionsClassContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowQuestionContext provides the question show action context.
type ShowQuestionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	QuestionID uuid.UUID
}

// NewShowQuestionContext parses the incoming request URL and body, performs validations and creates the
// context used by the question controller show action.
func NewShowQuestionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowQuestionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowQuestionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramQuestionID := req.Params["questionID"]
	if len(paramQuestionID) > 0 {
		rawQuestionID := paramQuestionID[0]
		if questionID, err2 := uuid.FromString(rawQuestionID); err2 == nil {
			rctx.QuestionID = questionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("questionID", rawQuestionID, "uuid"))
		}
	}
	return &rctx, err
}

// OKByAuthor sends a HTTP response with status code 200.
func (ctx *ShowQuestionContext) OKByAuthor(r *StudiouslyQuestionByAuthor) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/studiously.question+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKByType sends a HTTP response with status code 200.
func (ctx *ShowQuestionContext) OKByType(r *StudiouslyQuestionByType) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/studiously.question+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKByUnit sends a HTTP response with status code 200.
func (ctx *ShowQuestionContext) OKByUnit(r *StudiouslyQuestionByUnit) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/studiously.question+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowQuestionContext) OK(r *StudiouslyQuestion) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/studiously.question+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFeed sends a HTTP response with status code 200.
func (ctx *ShowQuestionContext) OKFeed(r *StudiouslyQuestionFeed) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/studiously.question+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowQuestionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowQuestionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
