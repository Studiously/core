// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// MultipleChoiceResponse represents a row from 'public.multiple_choice_responses'.
type MultipleChoiceResponse struct {
	ID         int64         `json:"id"`          // id
	QuestionID sql.NullInt64 `json:"question_id"` // question_id
	AuthorID   int64         `json:"author_id"`   // author_id
	ResponseID int64         `json:"response_id"` // response_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MultipleChoiceResponse exists in the database.
func (mcr *MultipleChoiceResponse) Exists() bool {
	return mcr._exists
}

// Deleted provides information if the MultipleChoiceResponse has been deleted from the database.
func (mcr *MultipleChoiceResponse) Deleted() bool {
	return mcr._deleted
}

// Insert inserts the MultipleChoiceResponse to the database.
func (mcr *MultipleChoiceResponse) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mcr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.multiple_choice_responses (` +
		`id, question_id, author_id, response_id` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, mcr.ID, mcr.QuestionID, mcr.AuthorID, mcr.ResponseID)
	err = db.QueryRow(sqlstr, mcr.ID, mcr.QuestionID, mcr.AuthorID, mcr.ResponseID).Scan(&mcr.ID)
	if err != nil {
		return err
	}

	// set existence
	mcr._exists = true

	return nil
}

// Update updates the MultipleChoiceResponse in the database.
func (mcr *MultipleChoiceResponse) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mcr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mcr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.multiple_choice_responses SET (` +
		`question_id, author_id, response_id` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, mcr.QuestionID, mcr.AuthorID, mcr.ResponseID, mcr.ID)
	_, err = db.Exec(sqlstr, mcr.QuestionID, mcr.AuthorID, mcr.ResponseID, mcr.ID)
	return err
}

// Save saves the MultipleChoiceResponse to the database.
func (mcr *MultipleChoiceResponse) Save(db XODB) error {
	if mcr.Exists() {
		return mcr.Update(db)
	}

	return mcr.Insert(db)
}

// Upsert performs an upsert for MultipleChoiceResponse.
//
// NOTE: PostgreSQL 9.5+ only
func (mcr *MultipleChoiceResponse) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if mcr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.multiple_choice_responses (` +
		`id, question_id, author_id, response_id` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, question_id, author_id, response_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.question_id, EXCLUDED.author_id, EXCLUDED.response_id` +
		`)`

	// run query
	XOLog(sqlstr, mcr.ID, mcr.QuestionID, mcr.AuthorID, mcr.ResponseID)
	_, err = db.Exec(sqlstr, mcr.ID, mcr.QuestionID, mcr.AuthorID, mcr.ResponseID)
	if err != nil {
		return err
	}

	// set existence
	mcr._exists = true

	return nil
}

// Delete deletes the MultipleChoiceResponse from the database.
func (mcr *MultipleChoiceResponse) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mcr._exists {
		return nil
	}

	// if deleted, bail
	if mcr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.multiple_choice_responses WHERE id = $1`

	// run query
	XOLog(sqlstr, mcr.ID)
	_, err = db.Exec(sqlstr, mcr.ID)
	if err != nil {
		return err
	}

	// set deleted
	mcr._deleted = true

	return nil
}

// MultipleChoiceQuestion returns the MultipleChoiceQuestion associated with the MultipleChoiceResponse's QuestionID (question_id).
//
// Generated from foreign key 'multiple_choice_question_fkey'.
func (mcr *MultipleChoiceResponse) MultipleChoiceQuestion(db XODB) (*MultipleChoiceQuestion, error) {
	return MultipleChoiceQuestionByID(db, mcr.QuestionID.Int64)
}

// MultipleChoiceAnswer returns the MultipleChoiceAnswer associated with the MultipleChoiceResponse's ResponseID (response_id).
//
// Generated from foreign key 'multiple_choice_response_fkey'.
func (mcr *MultipleChoiceResponse) MultipleChoiceAnswer(db XODB) (*MultipleChoiceAnswer, error) {
	return MultipleChoiceAnswerByID(db, mcr.ResponseID)
}

// MultipleChoiceResponseByID retrieves a row from 'public.multiple_choice_responses' as a MultipleChoiceResponse.
//
// Generated from index 'multiple_choice_responses_pkey'.
func MultipleChoiceResponseByID(db XODB, id int64) (*MultipleChoiceResponse, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, question_id, author_id, response_id ` +
		`FROM public.multiple_choice_responses ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	mcr := MultipleChoiceResponse{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mcr.ID, &mcr.QuestionID, &mcr.AuthorID, &mcr.ResponseID)
	if err != nil {
		return nil, err
	}

	return &mcr, nil
}
