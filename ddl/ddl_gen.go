// Code generated by go-bindata.
// sources:
// postgres/1_init.sql
// postgres/2_core.sql
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x5f\x6f\xda\x30\x14\xc5\xdf\xf3\x29\x4e\x25\xa6\x26\x5a\x23\x41\xa9\x36\xad\xa1\x0f\xae\xb9\x80\xa5\x60\x83\xe3\x4c\xdd\x53\x44\xc1\x62\xd6\x42\xa0\xc4\x74\x7b\xd8\x87\x9f\xc2\x1f\x35\xfb\xa3\xbd\x25\x57\xbf\x7b\xef\x39\xf7\x38\x8e\xf1\x7e\xe3\xd6\xfb\x85\xb7\xc8\x77\x01\xd7\xc4\x0c\x21\xa3\x79\x4e\x92\x13\xd6\xe5\xf6\x79\x51\x16\x6e\x55\xd4\xf6\xe5\x60\xab\xa5\x4d\x82\xa0\xdd\x93\xf9\x85\xb7\x1b\x5b\xf9\x47\xbb\x76\xd5\xa5\x7f\x94\x4b\x6e\x84\x92\x58\xdb\xca\x36\x5c\xe1\x56\xa1\x90\xa8\xed\xfe\xd5\x2d\x9b\x3f\xb8\xca\xdf\x40\xe5\x06\x7b\x5b\x1f\x4a\x8f\x67\xb7\x76\x95\x8f\xc0\x32\x74\x3a\xc1\x90\x78\xca\x34\x05\x00\x10\xc7\x30\x0a\x99\x61\xda\x40\x0c\x33\x64\x53\x96\xa6\xa4\x6f\xf0\x45\xe5\xe0\x2a\x4f\x87\xe0\x13\x26\xc7\x04\x33\x11\x59\xc3\x32\x4c\x95\x26\x68\xe2\x24\x0d\x72\x29\x9e\x60\xc4\x94\x32\xc3\xa6\xb3\xe3\xc8\xed\x61\x5f\xd8\xdd\x76\xf9\xf5\xbc\x16\xf7\x0f\xe8\xdd\x7d\xea\xf7\xfb\x1f\x3f\x74\xbb\x49\x70\x84\x6a\xfb\xd2\x08\x3d\x11\xc9\xb1\x54\x6d\xbf\x17\x1b\x57\x96\xae\xfe\xad\x1c\xc7\xcd\x92\x79\xde\x1c\x4e\x7f\x16\x9c\x20\x86\x24\x8d\x18\x09\xd2\x17\xa0\x2d\x71\xa4\x34\x88\xf1\xc9\x05\xbf\xba\xba\x0a\x1e\x69\x2c\xe4\x11\xce\x28\x25\x6e\x50\xd9\x1f\xfe\x75\x51\x86\xd7\x7f\x67\x70\x1d\xe1\x1d\x7a\xdd\xdb\x3b\x08\x69\xd4\x59\x68\xd2\x6e\x1e\xa5\x4a\xe9\x90\x9e\x8c\x66\xdc\x84\x34\x53\x7c\x82\x91\x56\x53\x2c\xcb\xed\xf2\x5b\xe1\xdd\xc6\xd6\x7e\xb1\xd9\x85\x51\x14\x9d\x86\xbc\x59\x3b\x0d\x3a\xc7\x72\xff\x80\xb0\xe5\x3a\x7e\x3b\x5d\x84\xc1\x00\xb7\xdd\x3f\xe9\xf3\xd7\x4f\x84\xad\xb0\x07\x03\xf4\xba\xd1\xff\xd0\xc6\x41\x94\x04\x24\x87\x49\xd0\xe9\x20\x65\x72\x9c\xb3\x31\x61\x96\xce\xc6\xd9\x3c\x4d\xfe\xfd\xe8\xa8\x5a\xfd\x0a\x00\x00\xff\xff\x98\xec\xfd\x8b\xc1\x02\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 705, mode: os.FileMode(420), modTime: time.Unix(1493388160, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgres2_coreSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x58\x4b\x73\xdb\x36\x10\xbe\xfb\x57\xec\xe4\x62\x69\x9a\xcc\x38\x49\xd3\x87\xd3\x76\x86\x95\xe0\xd6\x13\x85\x72\xf5\x38\xf8\xc4\x41\x48\x58\xc4\x84\x04\x58\x10\x8c\x92\xfe\xfa\x0e\x49\x90\xe2\x03\x14\x41\x5a\x52\x6e\xa6\xb0\xdc\x6f\xf7\xdb\xdd\x8f\x0b\xbf\x7a\x05\x3f\x84\x74\x27\xb0\x24\xb0\x8d\xae\xae\x66\x2b\x64\x6d\x10\x6c\x1e\x1f\x10\xb8\x01\x8e\x63\xc1\x79\xe8\x08\x1e\x10\xb0\xd6\x80\xec\xed\x47\x98\x5c\x01\x00\x5c\xc7\x32\xf1\x08\x93\xd7\x2f\xf3\xc7\x90\x7b\x44\x60\xc9\x45\xf1\x83\x24\xd8\xf5\x49\xf9\x88\xbd\x90\x32\x1a\xcb\xdc\xe6\x6a\xfa\xfe\x80\x65\xfd\xb9\x50\x60\x24\x56\xde\xa9\x07\x9f\xe8\x8e\x32\x09\x73\x74\x67\x6d\x17\x1b\xd8\x11\x96\xfa\x27\x0e\xf5\x26\xaf\xa7\x60\x2f\x37\x60\x6f\x17\x8b\xdc\x3b\xc3\x21\x01\xd7\xc7\x02\xbb\x92\x08\xf8\x82\xc5\x37\xca\x76\x93\x77\x37\xd3\xf2\xfd\x6b\x8b\xc1\x96\xa5\x86\x1e\xcc\x52\xac\xeb\xdb\xdb\xd6\x1b\x0d\xb7\x6e\x22\x04\x61\xd2\x49\x18\x95\x2a\x9e\x76\xe0\x01\x77\x71\xe0\xd0\x94\x0b\x2a\x69\x99\x41\x12\x13\xe1\x1c\xd2\xa8\x3b\x8e\x70\x1c\xef\xb9\xf0\x40\x92\xaf\x87\xb3\xb6\xef\x30\x09\x24\x8d\x02\xe2\xb8\x3e\xa7\x2e\x71\x30\x8b\xf7\x44\x98\x91\xf4\xa6\x49\xd2\xbf\x09\x89\x25\xe5\xac\x33\xaa\xdc\x7b\x3d\x26\x45\x04\x17\x82\xb8\x12\x3e\x71\x1e\x10\xcc\x4a\xbc\x27\x1c\xc4\x64\x40\xfc\x45\x08\x66\x19\xbc\x6d\x66\x90\xf5\x48\x77\xf8\x89\xf4\x79\x85\xf3\x7a\xd6\xba\xb4\x22\x2c\x24\xc5\x81\xe3\x0a\xe2\xd1\xbe\xec\xf2\x57\x5e\x48\x1a\x92\x58\xe2\x30\x7a\x01\xe5\x9f\xb0\xa7\xd2\xcf\x1e\xe1\x3f\xce\x48\xe9\x80\xf1\xfd\xa4\x99\x43\xda\x4b\x9a\x14\xfa\xb9\x13\x24\x8e\x38\x33\x1d\x91\x1f\xfb\xab\xaf\x67\xad\xf1\x5a\x81\xda\x15\x72\x3d\xe6\x48\xf0\x27\x1a\x18\x86\xf8\xae\x45\xcd\xb1\x91\x39\x5e\xfb\x4c\xa0\x1a\x7a\x55\x4e\x7e\xa1\x54\xb7\xb7\x0d\x8b\x6e\xf2\x4b\xb6\x04\x96\x94\xed\x8a\x84\x7a\xc8\xea\x9d\xb0\x2f\x5c\x92\xb2\xcd\xba\xd1\x63\x9f\x0b\xa9\x86\x7d\xe0\xcc\xfc\x74\x8a\x99\x89\x04\x0f\x23\xa9\x9b\x98\x54\xc3\xc3\x24\x74\x02\xc2\x76\xd2\x07\xca\x24\xd9\x11\xa1\xce\xf0\xd7\xce\xb3\x8e\xae\x3f\xd1\x4c\xcd\x96\xf6\x7a\xb3\xb2\xee\xed\x0d\xe4\xe0\x8e\xeb\x13\xf7\x33\xcc\xfe\x46\xb3\x0f\x30\x99\x4c\x1a\x61\xff\xd6\x88\x75\x0a\xcb\x15\x34\x8d\x7e\x87\x9b\xe9\x74\xda\x02\xa8\xd5\xa6\x09\x53\x67\xe0\x8f\x06\x5d\x0a\xa6\x69\x94\xc2\xf4\xf4\xc0\xb0\xd9\xff\xf9\xc4\xb3\x9f\x35\x42\x3b\x42\x29\x12\xe2\x64\x1a\x39\xb0\x47\x7f\x39\xb7\xae\xab\xcf\x95\x62\xaf\x35\x70\xe7\x6d\xc9\xa3\x44\x0d\x2b\xe4\xaf\xc3\x3f\xe1\x5a\xae\xca\x42\xf6\x4b\x4f\xca\x8a\xe1\x12\x76\x33\xac\x8c\xd9\x8e\x96\x16\x2b\x7f\xdc\x13\xba\xf3\x65\xa1\x12\x25\xc2\xcd\xb1\xd8\x62\xd3\xdd\xe7\xb5\x7e\x43\xd4\xb4\x0a\x09\x31\x0d\x34\xab\xe3\xdb\x37\x37\x8d\x92\x5a\x8b\x0d\x5a\xa9\x48\x96\xf6\xe2\xb1\xd8\x58\x33\x37\xd6\x7c\x5e\x15\x09\x75\xe4\x44\x9f\xc9\x37\x78\x58\xdd\x7f\xb4\x56\x8f\xf0\x01\x3d\xc2\x84\x7a\x5a\x5f\xcd\x25\x52\xe7\xb4\x69\xa3\xf1\xae\xbe\xa0\x5a\x88\x8e\x5d\x52\x87\xd4\x61\x6a\x9e\x4e\xe7\xde\x67\x82\x56\x1a\x8f\xc7\x2b\xc7\xcc\x04\xaf\x34\x36\xc7\x2b\xf6\x1c\x9d\xfb\xe2\xcc\xdc\x5b\x73\xd9\xd0\x79\x55\x47\x4e\x45\x01\x9c\x72\xd8\x9d\x14\x69\x6b\xdf\xff\xb3\x45\x30\xa9\x58\xbc\x3c\xe8\x81\x16\x58\xbf\x67\xe8\xe0\xf5\x96\xe6\x29\xea\xbf\x66\xbd\x48\x23\x4a\xa3\xfb\x2a\xe9\x70\x74\x76\xa3\x50\x8e\x66\xa3\xb3\x33\x47\xc9\xc4\x58\xe7\x36\x3b\x18\xe0\x27\xee\x18\xf4\xec\xc0\xdc\x8f\x81\xe2\x55\xaf\xcc\xce\x53\xea\xf8\x6e\xb9\x42\xf7\x7f\xd9\xb9\xe3\xea\xf1\x14\x56\xe8\x0e\xad\x90\x3d\x43\xeb\x3c\xa3\x14\x17\x96\x36\x6c\x1f\xe6\xa9\xea\xcf\xac\xf5\xcc\x9a\xa7\xd8\x30\x47\x0b\xb4\x41\xb0\x46\xb9\x20\x9f\x49\xdf\xaa\xc3\xd5\x8e\xbd\x72\x5a\x0b\xbd\x53\xbf\x7a\xd3\x51\xbf\xbc\x3f\xb1\x80\xaa\xa1\x6f\x67\x70\x50\x83\x6a\xfc\x85\x60\x15\xe1\x8e\xe0\x7a\x90\xde\x3e\x33\xbc\x7e\x36\x4f\x4c\x67\xbe\xd6\x68\x7a\x59\xad\x3b\xb5\x68\xd5\x1c\x9c\x32\xd8\x41\xe4\x96\x4d\x7a\xd1\xfe\x3d\xd3\x17\x59\x93\x44\xe5\xff\x11\x47\x93\x50\x23\xfd\xdd\x9a\x46\xdd\x2e\x34\x19\xa8\x93\x13\xab\x9f\xd1\x46\xf2\x9c\x4e\xee\xe7\xcb\x28\x04\xb5\xa1\xea\x78\x51\xbb\x6b\x8d\x97\xf8\x99\x35\x1c\xb2\x5a\xa5\x97\x87\xcb\xca\xd2\xc8\xfd\xeb\x5c\x02\x7a\xac\xbf\x46\x2e\x70\xdf\x41\xeb\x47\x92\x7a\x69\x95\x1f\x49\xe8\x08\x7d\xd7\x13\x72\xba\x6e\x30\xe7\xf8\xd2\xa2\x38\x62\x4b\x1f\xd8\xb0\xba\x5b\xc4\x73\xba\x62\xc4\xed\xe5\x70\x0b\xbc\xa8\x20\x8c\x88\xb4\x18\xa5\x0b\x4e\xd9\x88\x0e\x18\x31\x61\xc7\xba\xe0\x2c\x35\xbf\xf4\x20\xf5\x5c\x44\xcf\x5d\xd8\xff\x03\x00\x00\xff\xff\x3a\x54\x54\x22\xa5\x1e\x00\x00")

func postgres2_coreSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres2_coreSql,
		"postgres/2_core.sql",
	)
}

func postgres2_coreSql() (*asset, error) {
	bytes, err := postgres2_coreSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/2_core.sql", size: 7845, mode: os.FileMode(420), modTime: time.Unix(1493388249, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres/1_init.sql": postgres1_initSql,
	"postgres/2_core.sql": postgres2_coreSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
		"2_core.sql": &bintree{postgres2_coreSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

