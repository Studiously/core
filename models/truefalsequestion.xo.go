// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"

	uuid "github.com/satori/go.uuid"
)

// TrueFalseQuestion represents a row from 'public.true_false_questions'.
type TrueFalseQuestion struct {
	ID            uuid.UUID `json:"id"`             // id
	ClassID       uuid.UUID `json:"class_id"`       // class_id
	AuthorID      uuid.UUID `json:"author_id"`      // author_id
	Question      string    `json:"question"`       // question
	CorrectAnswer bool      `json:"correct_answer"` // correct_answer
	UnitID        uuid.UUID `json:"unit_id"`        // unit_id
	Timestamp     time.Time `json:"timestamp"`      // timestamp

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TrueFalseQuestion exists in the database.
func (tfq *TrueFalseQuestion) Exists() bool {
	return tfq._exists
}

// Deleted provides information if the TrueFalseQuestion has been deleted from the database.
func (tfq *TrueFalseQuestion) Deleted() bool {
	return tfq._deleted
}

// Insert inserts the TrueFalseQuestion to the database.
func (tfq *TrueFalseQuestion) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tfq._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.true_false_questions (` +
		`id, class_id, author_id, question, correct_answer, unit_id, timestamp` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)`

	// run query
	XOLog(sqlstr, tfq.ID, tfq.ClassID, tfq.AuthorID, tfq.Question, tfq.CorrectAnswer, tfq.UnitID, tfq.Timestamp)
	err = db.QueryRow(sqlstr, tfq.ID, tfq.ClassID, tfq.AuthorID, tfq.Question, tfq.CorrectAnswer, tfq.UnitID, tfq.Timestamp).Scan(&tfq.ID)
	if err != nil {
		return err
	}

	// set existence
	tfq._exists = true

	return nil
}

// Update updates the TrueFalseQuestion in the database.
func (tfq *TrueFalseQuestion) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tfq._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tfq._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.true_false_questions SET (` +
		`class_id, author_id, question, correct_answer, unit_id, timestamp` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE id = $7`

	// run query
	XOLog(sqlstr, tfq.ClassID, tfq.AuthorID, tfq.Question, tfq.CorrectAnswer, tfq.UnitID, tfq.Timestamp, tfq.ID)
	_, err = db.Exec(sqlstr, tfq.ClassID, tfq.AuthorID, tfq.Question, tfq.CorrectAnswer, tfq.UnitID, tfq.Timestamp, tfq.ID)
	return err
}

// Save saves the TrueFalseQuestion to the database.
func (tfq *TrueFalseQuestion) Save(db XODB) error {
	if tfq.Exists() {
		return tfq.Update(db)
	}

	return tfq.Insert(db)
}

// Upsert performs an upsert for TrueFalseQuestion.
//
// NOTE: PostgreSQL 9.5+ only
func (tfq *TrueFalseQuestion) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if tfq._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.true_false_questions (` +
		`id, class_id, author_id, question, correct_answer, unit_id, timestamp` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, class_id, author_id, question, correct_answer, unit_id, timestamp` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.class_id, EXCLUDED.author_id, EXCLUDED.question, EXCLUDED.correct_answer, EXCLUDED.unit_id, EXCLUDED.timestamp` +
		`)`

	// run query
	XOLog(sqlstr, tfq.ID, tfq.ClassID, tfq.AuthorID, tfq.Question, tfq.CorrectAnswer, tfq.UnitID, tfq.Timestamp)
	_, err = db.Exec(sqlstr, tfq.ID, tfq.ClassID, tfq.AuthorID, tfq.Question, tfq.CorrectAnswer, tfq.UnitID, tfq.Timestamp)
	if err != nil {
		return err
	}

	// set existence
	tfq._exists = true

	return nil
}

// Delete deletes the TrueFalseQuestion from the database.
func (tfq *TrueFalseQuestion) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tfq._exists {
		return nil
	}

	// if deleted, bail
	if tfq._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.true_false_questions WHERE id = $1`

	// run query
	XOLog(sqlstr, tfq.ID)
	_, err = db.Exec(sqlstr, tfq.ID)
	if err != nil {
		return err
	}

	// set deleted
	tfq._deleted = true

	return nil
}

// Profile returns the Profile associated with the TrueFalseQuestion's AuthorID (author_id).
//
// Generated from foreign key 'true_false_author_id_fkey'.
func (tfq *TrueFalseQuestion) Profile(db XODB) (*Profile, error) {
	return ProfileByID(db, tfq.AuthorID)
}

// Class returns the Class associated with the TrueFalseQuestion's ClassID (class_id).
//
// Generated from foreign key 'true_false_class_id_fkey'.
func (tfq *TrueFalseQuestion) Class(db XODB) (*Class, error) {
	return ClassByID(db, tfq.ClassID)
}

// Unit returns the Unit associated with the TrueFalseQuestion's UnitID (unit_id).
//
// Generated from foreign key 'true_false_unit_id_fkey'.
func (tfq *TrueFalseQuestion) Unit(db XODB) (*Unit, error) {
	return UnitByID(db, tfq.UnitID)
}

// TrueFalseQuestionByID retrieves a row from 'public.true_false_questions' as a TrueFalseQuestion.
//
// Generated from index 'true_false_questions_pkey'.
func TrueFalseQuestionByID(db XODB, id uuid.UUID) (*TrueFalseQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, class_id, author_id, question, correct_answer, unit_id, timestamp ` +
		`FROM public.true_false_questions ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	tfq := TrueFalseQuestion{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&tfq.ID, &tfq.ClassID, &tfq.AuthorID, &tfq.Question, &tfq.CorrectAnswer, &tfq.UnitID, &tfq.Timestamp)
	if err != nil {
		return nil, err
	}

	return &tfq, nil
}
