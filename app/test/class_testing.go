// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "studiously": class TestHelpers
//
// Command:
// $ goagen
// --design=github.com/studiously/core/design
// --out=$(GOPATH)/src/github.com/studiously/core
// --version=v1.2.0-dirty

package test

import (
	"bytes"
	"context"
	"fmt"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/goatest"
	uuid "github.com/satori/go.uuid"
	"github.com/studiously/core/app"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
)

// ListClassInternalServerError runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListClassInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/classes"),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	listCtx, _err := app.NewListClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.List(listCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// ListClassNotFound runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListClassNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/classes"),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	listCtx, _err := app.NewListClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.List(listCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ListClassOK runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListClassOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController) (http.ResponseWriter, app.StudiouslyClassCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/classes"),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	listCtx, _err := app.NewListClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.List(listCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.StudiouslyClassCollection
	if resp != nil {
		var ok bool
		mt, ok = resp.(app.StudiouslyClassCollection)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.StudiouslyClassCollection", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowClassInternalServerError runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowClassInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/classes/%v", classID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showCtx, _err := app.NewShowClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Show(showCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// ShowClassNotFound runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowClassNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/classes/%v", classID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showCtx, _err := app.NewShowClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Show(showCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ShowClassOK runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowClassOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID) (http.ResponseWriter, *app.StudiouslyClass) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/classes/%v", classID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showCtx, _err := app.NewShowClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Show(showCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.StudiouslyClass
	if resp != nil {
		var ok bool
		mt, ok = resp.(*app.StudiouslyClass)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.StudiouslyClass", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowMembersClassInternalServerError runs the method ShowMembers of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowMembersClassInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/classes/%v/members", classID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showMembersCtx, _err := app.NewShowMembersClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.ShowMembers(showMembersCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// ShowMembersClassNotFound runs the method ShowMembers of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowMembersClassNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/classes/%v/members", classID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showMembersCtx, _err := app.NewShowMembersClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.ShowMembers(showMembersCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ShowMembersClassOK runs the method ShowMembers of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowMembersClassOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID) (http.ResponseWriter, app.StudiouslyMemberCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/classes/%v/members", classID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showMembersCtx, _err := app.NewShowMembersClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.ShowMembers(showMembersCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.StudiouslyMemberCollection
	if resp != nil {
		var ok bool
		mt, ok = resp.(app.StudiouslyMemberCollection)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.StudiouslyMemberCollection", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowQuestionsClassBadRequest runs the method ShowQuestions of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowQuestionsClassBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID, answered *bool, authorID *uuid.UUID, questionType *string, unitID *uuid.UUID) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		query["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		query["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		query["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		query["unit_id"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/classes/%v/questions", classID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		prms["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		prms["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		prms["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		prms["unit_id"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showQuestionsCtx, _err := app.NewShowQuestionsClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.ShowQuestions(showQuestionsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}

	// Return results
	return rw
}

// ShowQuestionsClassInternalServerError runs the method ShowQuestions of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowQuestionsClassInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID, answered *bool, authorID *uuid.UUID, questionType *string, unitID *uuid.UUID) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		query["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		query["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		query["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		query["unit_id"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/classes/%v/questions", classID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		prms["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		prms["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		prms["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		prms["unit_id"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showQuestionsCtx, _err := app.NewShowQuestionsClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.ShowQuestions(showQuestionsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// ShowQuestionsClassNotFound runs the method ShowQuestions of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowQuestionsClassNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID, answered *bool, authorID *uuid.UUID, questionType *string, unitID *uuid.UUID) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		query["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		query["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		query["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		query["unit_id"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/classes/%v/questions", classID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		prms["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		prms["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		prms["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		prms["unit_id"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showQuestionsCtx, _err := app.NewShowQuestionsClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.ShowQuestions(showQuestionsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ShowQuestionsClassOKByAuthor runs the method ShowQuestions of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowQuestionsClassOKByAuthor(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID, answered *bool, authorID *uuid.UUID, questionType *string, unitID *uuid.UUID) (http.ResponseWriter, app.StudiouslyQuestionByAuthorCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		query["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		query["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		query["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		query["unit_id"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/classes/%v/questions", classID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		prms["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		prms["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		prms["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		prms["unit_id"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showQuestionsCtx, _err := app.NewShowQuestionsClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.ShowQuestions(showQuestionsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.StudiouslyQuestionByAuthorCollection
	if resp != nil {
		var ok bool
		mt, ok = resp.(app.StudiouslyQuestionByAuthorCollection)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.StudiouslyQuestionByAuthorCollection", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowQuestionsClassOKByType runs the method ShowQuestions of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowQuestionsClassOKByType(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID, answered *bool, authorID *uuid.UUID, questionType *string, unitID *uuid.UUID) (http.ResponseWriter, app.StudiouslyQuestionByTypeCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		query["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		query["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		query["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		query["unit_id"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/classes/%v/questions", classID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		prms["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		prms["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		prms["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		prms["unit_id"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showQuestionsCtx, _err := app.NewShowQuestionsClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.ShowQuestions(showQuestionsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.StudiouslyQuestionByTypeCollection
	if resp != nil {
		var ok bool
		mt, ok = resp.(app.StudiouslyQuestionByTypeCollection)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.StudiouslyQuestionByTypeCollection", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowQuestionsClassOKByUnit runs the method ShowQuestions of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowQuestionsClassOKByUnit(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID, answered *bool, authorID *uuid.UUID, questionType *string, unitID *uuid.UUID) (http.ResponseWriter, app.StudiouslyQuestionByUnitCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		query["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		query["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		query["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		query["unit_id"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/classes/%v/questions", classID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		prms["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		prms["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		prms["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		prms["unit_id"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showQuestionsCtx, _err := app.NewShowQuestionsClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.ShowQuestions(showQuestionsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.StudiouslyQuestionByUnitCollection
	if resp != nil {
		var ok bool
		mt, ok = resp.(app.StudiouslyQuestionByUnitCollection)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.StudiouslyQuestionByUnitCollection", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowQuestionsClassOK runs the method ShowQuestions of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowQuestionsClassOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID, answered *bool, authorID *uuid.UUID, questionType *string, unitID *uuid.UUID) (http.ResponseWriter, app.StudiouslyQuestionCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		query["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		query["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		query["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		query["unit_id"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/classes/%v/questions", classID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		prms["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		prms["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		prms["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		prms["unit_id"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showQuestionsCtx, _err := app.NewShowQuestionsClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.ShowQuestions(showQuestionsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.StudiouslyQuestionCollection
	if resp != nil {
		var ok bool
		mt, ok = resp.(app.StudiouslyQuestionCollection)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.StudiouslyQuestionCollection", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowQuestionsClassOKFeed runs the method ShowQuestions of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowQuestionsClassOKFeed(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClassController, classID uuid.UUID, answered *bool, authorID *uuid.UUID, questionType *string, unitID *uuid.UUID) (http.ResponseWriter, app.StudiouslyQuestionFeedCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		query["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		query["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		query["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		query["unit_id"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/classes/%v/questions", classID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["class_id"] = []string{fmt.Sprintf("%v", classID)}
	if answered != nil {
		sliceVal := []string{fmt.Sprintf("%v", *answered)}
		prms["answered"] = sliceVal
	}
	if authorID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *authorID)}
		prms["author_id"] = sliceVal
	}
	if questionType != nil {
		sliceVal := []string{*questionType}
		prms["question_type"] = sliceVal
	}
	if unitID != nil {
		sliceVal := []string{fmt.Sprintf("%v", *unitID)}
		prms["unit_id"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClassTest"), rw, req, prms)
	showQuestionsCtx, _err := app.NewShowQuestionsClassContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.ShowQuestions(showQuestionsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.StudiouslyQuestionFeedCollection
	if resp != nil {
		var ok bool
		mt, ok = resp.(app.StudiouslyQuestionFeedCollection)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.StudiouslyQuestionFeedCollection", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}
