// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/lib/pq"
)

// GorpMigration represents a row from 'public.gorp_migrations'.
type GorpMigration struct {
	ID        string      `json:"id"`         // id
	AppliedAt pq.NullTime `json:"applied_at"` // applied_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GorpMigration exists in the database.
func (gm *GorpMigration) Exists() bool {
	return gm._exists
}

// Deleted provides information if the GorpMigration has been deleted from the database.
func (gm *GorpMigration) Deleted() bool {
	return gm._deleted
}

// Insert inserts the GorpMigration to the database.
func (gm *GorpMigration) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if gm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.gorp_migrations (` +
		`id, applied_at` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, gm.ID, gm.AppliedAt)
	err = db.QueryRow(sqlstr, gm.ID, gm.AppliedAt).Scan(&gm.ID)
	if err != nil {
		return err
	}

	// set existence
	gm._exists = true

	return nil
}

// Update updates the GorpMigration in the database.
func (gm *GorpMigration) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if gm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.gorp_migrations SET (` +
		`applied_at` +
		`) = ( ` +
		`$1` +
		`) WHERE id = $2`

	// run query
	XOLog(sqlstr, gm.AppliedAt, gm.ID)
	_, err = db.Exec(sqlstr, gm.AppliedAt, gm.ID)
	return err
}

// Save saves the GorpMigration to the database.
func (gm *GorpMigration) Save(db XODB) error {
	if gm.Exists() {
		return gm.Update(db)
	}

	return gm.Insert(db)
}

// Upsert performs an upsert for GorpMigration.
//
// NOTE: PostgreSQL 9.5+ only
func (gm *GorpMigration) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if gm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.gorp_migrations (` +
		`id, applied_at` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, applied_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.applied_at` +
		`)`

	// run query
	XOLog(sqlstr, gm.ID, gm.AppliedAt)
	_, err = db.Exec(sqlstr, gm.ID, gm.AppliedAt)
	if err != nil {
		return err
	}

	// set existence
	gm._exists = true

	return nil
}

// Delete deletes the GorpMigration from the database.
func (gm *GorpMigration) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gm._exists {
		return nil
	}

	// if deleted, bail
	if gm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.gorp_migrations WHERE id = $1`

	// run query
	XOLog(sqlstr, gm.ID)
	_, err = db.Exec(sqlstr, gm.ID)
	if err != nil {
		return err
	}

	// set deleted
	gm._deleted = true

	return nil
}

// GorpMigrationByID retrieves a row from 'public.gorp_migrations' as a GorpMigration.
//
// Generated from index 'gorp_migrations_pkey'.
func GorpMigrationByID(db XODB, id string) (*GorpMigration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, applied_at ` +
		`FROM public.gorp_migrations ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	gm := GorpMigration{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&gm.ID, &gm.AppliedAt)
	if err != nil {
		return nil, err
	}

	return &gm, nil
}
