// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// Profile represents a row from 'public.profiles'.
type Profile struct {
	ID      int64         `json:"id"`       // id
	UserID  int64         `json:"user_id"`  // user_id
	ClassID int64         `json:"class_id"` // class_id
	Role    ClassroomRole `json:"role"`     // role

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Profile exists in the database.
func (p *Profile) Exists() bool {
	return p._exists
}

// Deleted provides information if the Profile has been deleted from the database.
func (p *Profile) Deleted() bool {
	return p._deleted
}

// Insert inserts the Profile to the database.
func (p *Profile) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.profiles (` +
		`id, user_id, class_id, role` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.UserID, p.ClassID, p.Role)
	err = db.QueryRow(sqlstr, p.ID, p.UserID, p.ClassID, p.Role).Scan(&p.ID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Profile in the database.
func (p *Profile) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.profiles SET (` +
		`user_id, class_id, role` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, p.UserID, p.ClassID, p.Role, p.ID)
	_, err = db.Exec(sqlstr, p.UserID, p.ClassID, p.Role, p.ID)
	return err
}

// Save saves the Profile to the database.
func (p *Profile) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Profile.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Profile) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.profiles (` +
		`id, user_id, class_id, role` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, user_id, class_id, role` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.user_id, EXCLUDED.class_id, EXCLUDED.role` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.UserID, p.ClassID, p.Role)
	_, err = db.Exec(sqlstr, p.ID, p.UserID, p.ClassID, p.Role)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Profile from the database.
func (p *Profile) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.profiles WHERE id = $1`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// Class returns the Class associated with the Profile's ClassID (class_id).
//
// Generated from foreign key 'profiles_class_fkey'.
func (p *Profile) Class(db XODB) (*Class, error) {
	return ClassByID(db, p.ClassID)
}

// User returns the User associated with the Profile's UserID (user_id).
//
// Generated from foreign key 'profiles_user_id_fkey'.
func (p *Profile) User(db XODB) (*User, error) {
	return UserByID(db, p.UserID)
}

// ProfileByID retrieves a row from 'public.profiles' as a Profile.
//
// Generated from index 'profiles_pkey'.
func ProfileByID(db XODB, id int64) (*Profile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, class_id, role ` +
		`FROM public.profiles ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	p := Profile{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.UserID, &p.ClassID, &p.Role)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
