// Code generated by go-bindata.
// sources:
// postgres/1_init.sql
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x38\xe8\x4b\x6c\xac\x05\x82\x0d\x7b\x49\xb7\x01\x9a\xcd\x6c\x41\x5d\x39\xf3\x05\x58\x9e\x04\x4e\x62\x6c\xa2\x12\xa9\x51\x54\xdd\xec\xd7\x0f\x92\x28\x46\x17\xea\x62\xc6\x76\xfa\x16\x89\xc7\xe7\xfb\xce\xed\xd3\x61\x3e\x7c\x80\x1f\x22\xba\x13\x58\x12\xd8\xc6\x57\xb3\x15\x72\x36\x08\xd0\xdf\x1b\xe4\xae\xef\x97\x2e\xc4\x3b\x5f\x3c\xc7\x92\x7f\xbc\x2a\xcf\x36\x8f\x0f\x08\xfc\x10\x27\x89\xe0\x3c\xf2\x04\x0f\x09\x38\x6b\x40\xee\xf6\x33\x4c\xae\x00\x00\xae\x13\x99\x06\x84\xc9\xeb\xf7\xc5\x63\xc4\x03\x22\xb0\xe4\xa2\x7c\x21\x09\xf6\xf7\x44\x3f\xe2\x20\xa2\x8c\x26\xb2\xb0\xb9\x9a\x56\xb0\x9c\xdf\x17\x0a\x8c\x24\xca\x3b\x0d\x20\x4d\x69\x00\x73\x74\xe7\x6c\x17\x1b\xd8\x11\xe6\x09\xcc\x02\x1e\x79\xd9\xfb\xc9\x14\xdc\xe5\x06\xdc\xed\x62\x51\xb8\x67\x38\x22\xe0\xef\xb1\xc0\xbe\x24\x02\xbe\x62\xf1\x4c\xd9\x6e\xf2\xf3\xcd\x54\xbb\xb8\x76\x18\x6c\x59\x66\x18\xc0\x2c\x03\xbb\xbe\xbd\x6d\xfd\xa2\xe1\xd6\x4f\x85\x20\x4c\x7a\x29\xa3\x32\x27\xd4\xe6\x1d\x72\x1f\x87\x1e\xcd\x52\x41\x25\xd5\x01\xa4\x09\x11\x5e\x19\x45\xdd\x69\x8c\x93\xe4\xc0\x45\x00\x92\x7c\x93\xfa\xac\xed\x39\x4a\x43\x49\xe3\x90\x78\xfe\x9e\x53\x9f\x78\x98\x25\x07\x22\x6c\x33\xf4\x6f\x4a\x12\x49\x39\xeb\x20\x55\x38\xaf\x53\x52\x39\xe0\x42\x10\x5f\xc2\x3f\x9c\x87\x04\x33\x0d\xf8\x84\xc3\x84\x1c\x41\xbf\x24\x60\x1b\x40\xde\x20\x5d\xec\x53\xb9\xe7\x3a\xdf\xf5\x80\x4d\x31\xc5\x58\x48\x8a\x43\xcf\x17\x24\xa0\x43\xa1\x15\x3f\x79\x27\x69\x44\x12\x89\xa3\xf8\x1d\xe8\x3f\xe1\x40\xe5\x3e\x7f\x84\xff\x38\x23\xda\x01\xe3\x87\x16\xff\xac\x87\x5a\xf4\x87\xd3\x26\x48\x12\x73\x66\x3f\x19\xcd\xba\x9b\x12\xd6\xf8\x49\x09\x69\x66\x5b\xa7\x1b\x0b\xfe\x44\x43\x6b\x76\x3d\x63\xd2\x57\xef\x5c\x8f\x1a\xf2\xa4\xe7\xbc\x14\xa6\xdb\xdb\x86\x45\x77\xd2\x75\x92\x04\x96\x94\xed\xca\x68\x7a\xb3\x34\x30\x50\x5f\xb9\x24\xba\xb1\xba\x91\x93\x3d\x17\x52\x8d\xf6\xc5\x47\x24\x16\x3c\x8a\xa5\x69\x40\x32\xad\x8e\xd2\xc8\x0b\x09\xdb\xc9\x3d\x50\x26\xc9\x8e\x08\x75\x86\xbf\x75\x9e\x19\x9b\xfc\x44\x03\x34\x5b\xba\xeb\xcd\xca\xb9\x77\x37\x50\x40\x7b\xfe\x9e\xf8\x5f\x60\xf6\x27\x9a\x7d\x82\xc9\x64\xd2\x20\xfd\x4b\x83\xe9\x14\x96\x2b\x68\x1a\xfd\x0a\x37\xd3\xe9\xb4\x05\x50\x2b\x4b\x13\xa6\x1e\xff\x6f\x8d\x64\x29\x98\xa6\x51\x06\x33\x50\xfe\x37\x1c\xf5\xbc\x07\xda\xf4\xa4\x48\x89\x97\xab\xe1\x77\x25\xdf\xea\x93\xa4\xf2\xd6\x9a\xb2\x73\xb6\x62\x6f\x8e\x4e\x5d\xc0\x11\x69\xd2\x05\x1c\x96\x9a\x2c\x21\xe7\xa8\x5e\xbe\x7b\x65\x55\x2a\x1e\x0f\x84\xee\xf6\xb2\x94\x05\x8d\x70\xd3\xc7\x2c\xb1\xdf\x6b\x34\x7a\xe3\x3d\x89\x30\x0d\x0d\x2b\xe1\x4f\x3f\xde\x34\xaa\xe9\x2c\x36\x68\xa5\x98\x2c\xdd\xc5\x63\xb9\x8a\xe6\x6e\x9c\xf9\xbc\xaa\x0b\xea\xc8\x8b\xbf\x90\x67\x78\x58\xdd\x7f\x76\x56\x8f\xf0\x09\x3d\xc2\x84\x06\x46\x5f\xcd\xf5\xd0\xe4\xb4\x69\x63\xf0\xae\xbe\x93\x46\x88\x8e\x3d\xd1\x84\xd4\x61\x3a\x3e\x9c\xce\xa5\x6e\x0c\x9a\x36\xb6\xc7\xd3\x13\x36\x06\x4f\x1b\x8f\xc7\x2b\xd7\x19\x93\xfb\xf2\x6c\xbc\xb7\xe6\x5a\x61\xf2\xaa\x8e\xbc\xca\xec\x7b\x7a\xd0\xbd\x0c\x69\xeb\xde\xff\xb5\x45\x30\xa9\x58\xbc\x7f\xd1\x02\x23\xb0\x79\xab\x30\xc1\x9b\x2d\xc7\x87\x68\xfe\x80\x0d\x22\x59\x94\xc6\xf4\x2d\x32\xe1\x98\xec\xac\x50\x7a\xa3\x31\xd9\x8d\x47\xc9\xa5\xd8\xe4\x36\x3f\x38\xc2\x4f\xd2\x31\xe8\xf9\xc1\x78\x3f\x23\x14\xaf\x7a\x15\xf6\x9e\x32\xc7\x77\xcb\x15\xba\xff\xc3\x2d\x1c\x57\x8f\xa7\xb0\x42\x77\x68\x85\xdc\x19\x5a\x17\x11\x65\xb8\xb0\x74\x61\xfb\x30\xcf\x54\x7f\xe6\xac\x67\xce\x3c\xc3\x86\x39\x5a\xa0\x0d\x82\x35\x2a\x04\xf9\x4c\xfa\x56\x1d\xae\x36\xf7\xca\x69\x8d\x7a\xa7\x7e\x0d\x86\xa3\xde\x7c\x3c\xb1\x80\xaa\xa1\x6f\x47\xf0\xa2\x06\x55\xfe\xa5\x60\x95\x74\x2d\x72\x7d\x94\xde\xbe\x92\xde\x70\x36\x4f\x9c\xce\x62\xa9\x31\xf4\xb2\x5a\x76\x6a\x6c\xd5\x1c\x9c\x92\xec\x51\xc9\xd5\x4d\x7a\xd1\xfe\x3d\xd3\x17\xd9\x10\x44\xe5\x9f\x0e\xbd\x41\xa8\x91\x7e\xb3\xa6\x51\xd7\x0a\x43\x04\xea\xe4\xc4\xea\x37\x6a\x23\x79\x4d\x27\x0f\xe7\x6b\x14\x05\xb5\xa1\x9a\xf2\xa2\x76\xd7\x5a\x5e\x92\x57\xd6\xf0\x98\xd5\x4a\x60\x49\x2e\x2b\x4b\x96\xfb\xd7\xb9\x04\xb4\xaf\xbf\x2c\x17\xb8\x37\xd0\x7a\xcb\xa4\x5e\x5a\xe5\x2d\x13\x6a\xa1\xef\xe6\x84\x9c\xae\x1b\xc6\xe7\xf8\xd2\xa2\x68\xb1\xa5\x1f\xd9\xb0\xa6\x5b\xc4\x6b\xba\xc2\xe2\xf6\xf2\x72\x0b\xbc\xa8\x20\x58\x30\x2d\x47\xe9\x82\x53\x66\xd1\x01\x16\x13\xd6\xd7\x05\x67\xa9\xf9\xa5\x07\x69\xe0\x22\x7a\xee\xc2\xfe\x1f\x00\x00\xff\xff\xdd\xed\x85\x72\x99\x1e\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 7833, mode: os.FileMode(420), modTime: time.Unix(1493257548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres/1_init.sql": postgres1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

