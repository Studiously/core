// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "studiously": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/studiously/core/design
// --out=$(GOPATH)/src/github.com/studiously/core
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ClassController is the controller interface for the Class actions.
type ClassController interface {
	goa.Muxer
	List(*ListClassContext) error
	Show(*ShowClassContext) error
	ShowMembers(*ShowMembersClassContext) error
	ShowQuestions(*ShowQuestionsClassContext) error
}

// MountClassController "mounts" a Class resource controller on the given service.
func MountClassController(service *goa.Service, ctrl ClassController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListClassContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	service.Mux.Handle("GET", "/classes", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Class", "action", "List", "route", "GET /classes")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowClassContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/classes/:class_id", ctrl.MuxHandler("Show", h, nil))
	service.LogInfo("mount", "ctrl", "Class", "action", "Show", "route", "GET /classes/:class_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowMembersClassContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowMembers(rctx)
	}
	service.Mux.Handle("GET", "/classes/:class_id/members", ctrl.MuxHandler("ShowMembers", h, nil))
	service.LogInfo("mount", "ctrl", "Class", "action", "ShowMembers", "route", "GET /classes/:class_id/members")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowQuestionsClassContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowQuestions(rctx)
	}
	service.Mux.Handle("GET", "/classes/:class_id/questions", ctrl.MuxHandler("ShowQuestions", h, nil))
	service.LogInfo("mount", "ctrl", "Class", "action", "ShowQuestions", "route", "GET /classes/:class_id/questions")
}

// QuestionController is the controller interface for the Question actions.
type QuestionController interface {
	goa.Muxer
	Show(*ShowQuestionContext) error
}

// MountQuestionController "mounts" a Question resource controller on the given service.
func MountQuestionController(service *goa.Service, ctrl QuestionController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowQuestionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/questions/:questionID", ctrl.MuxHandler("Show", h, nil))
	service.LogInfo("mount", "ctrl", "Question", "action", "Show", "route", "GET /questions/:questionID")
}
