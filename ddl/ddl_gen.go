// Code generated by go-bindata.
// sources:
// postgres/1_init.sql
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x51\x6f\xa3\x46\x10\x7e\xcf\xaf\x18\x45\x95\x62\xab\x39\x29\x6a\xd5\x97\x5c\x5b\x89\xda\x9b\x9e\x75\x0e\x4e\x6d\x2c\x5d\x9e\xd0\x1e\x6c\xcc\xea\x60\x97\xee\x2e\xe7\xa4\xbf\xbe\x02\x16\x82\x61\x31\x98\xd8\xce\xbd\xc5\xec\x30\xdf\xcc\x37\x33\x1f\xb3\xf9\xf0\x01\x7e\x8e\xe8\x46\x60\x45\x60\x1d\x5f\x4c\x96\xc8\x72\x10\xac\x26\x9f\xd0\xbd\x05\xb3\x3b\xb0\x17\x0e\xa0\x2f\xb3\x95\xb3\x02\xf2\xac\x08\x93\x94\x33\xf9\xb1\xb0\x43\x5f\x1c\x64\xaf\x66\x0b\xbb\x66\x1a\x6f\x3c\xf1\x12\x2b\x5e\x38\xaa\xbe\xba\x42\x0e\x48\x82\x85\x17\xb8\x31\x56\x01\x38\x0b\xb8\xfc\x29\x91\x44\x5c\x5e\xc7\xc9\xd7\x90\x7a\xd7\x55\xeb\x02\xc9\x79\x7c\x40\xe0\x85\x58\x4a\xc1\x79\xe4\x0a\x1e\x12\xb0\x56\x80\xec\xf5\x3d\x8c\x2e\x00\x00\xae\xa4\x4a\x7c\xc2\xd4\xd5\x75\xfe\x33\xe2\x3e\x11\x58\x71\x51\x3c\x50\x04\x7b\x01\x29\x7f\x62\x3f\xa2\x8c\x4a\x95\xdb\x5c\x8c\x2b\x58\xd6\x5f\x73\x0d\x46\xa4\xf6\x4e\x7d\x48\x12\xea\xc3\x14\xdd\x59\xeb\xb9\x03\x1b\xc2\x5c\x81\x99\xcf\x23\x37\x7d\x3e\x1a\x67\xe9\xdb\xeb\xf9\x3c\x77\xcf\x70\x44\xc0\x0b\xb0\xc0\x9e\x22\x02\xbe\x63\xf1\x42\xd9\x66\xf4\xdb\xcd\xb8\x74\x71\x65\x31\x58\xb3\xd4\xd0\x87\x49\x0a\x76\x75\x7b\xdb\x78\xa3\xe6\xd6\x4b\x84\x20\x4c\xb9\x09\xa3\x2a\x0b\xa8\x19\x77\xc8\x3d\x1c\xba\x34\xa5\x82\x2a\x5a\x26\x90\x32\xec\x16\x59\xec\x3a\x8d\xb1\x94\x5b\x2e\x7c\x50\xe4\x59\x95\x67\x4d\xcf\x51\x12\x2a\x1a\x87\xc4\xf5\x02\x4e\x3d\xe2\x62\x26\xb7\x44\x0c\x65\xe8\xdf\x84\x48\x45\x39\x6b\x09\x2a\x77\xbe\x1b\x92\xe6\x80\x0b\x41\x3c\x05\x5f\x39\x0f\x09\x66\x25\xe0\x13\x0e\x25\x39\x20\xfc\x22\x80\xa1\x09\x64\x0d\xd2\x16\x7d\xa2\x02\x5e\xf2\xbd\x9b\xb0\x29\xa7\x18\x0b\x45\x71\xe8\x7a\x82\xf8\xb4\x2b\xb5\xfc\x95\x4b\x45\x23\x22\x15\x8e\xe2\x4b\x28\xff\x84\x2d\x55\x41\xf6\x13\xfe\xe3\x8c\x94\x0e\x18\xdf\x36\xe2\x4f\x7b\xa8\x11\x7e\x37\x6d\x82\xc8\x98\xb3\xe1\x93\x51\xaf\xbb\x89\xb0\xda\x2b\x05\xa4\x39\xda\xdd\x70\x63\xc1\x9f\x68\x38\x38\xba\x3d\x63\xb2\xaf\xde\x99\x1e\xd5\xe4\xa9\x9c\xf3\x42\x98\x6e\x6f\x6b\x16\xed\xa4\x97\x24\x09\xac\x28\xdb\x14\xd9\xec\x65\xa9\x63\xa0\xbe\x73\x45\xca\xc6\x6a\x47\x96\x01\x17\x4a\x8f\xf6\xd9\x47\x24\x16\x3c\x8a\x95\x69\x40\x52\xad\x8e\x92\xc8\x0d\x09\xdb\xa8\x00\x28\x53\x64\x43\x84\x3e\xc3\xcf\xad\x67\xc6\x26\x3f\xd2\x00\x4d\x16\xf6\xca\x59\x5a\x33\xdb\x81\x1c\xda\xf5\x02\xe2\x7d\x83\xc9\x27\x34\xf9\x0c\xa3\xd1\xa8\x16\xf4\xef\xb5\x48\xc7\xb0\x58\x42\xdd\xe8\x0f\xb8\x19\x8f\xc7\x0d\x80\x9d\xb2\xd4\x61\x76\xf3\xff\xb3\x46\x96\x86\xa9\x1b\xa5\x30\x1d\xe5\x7f\xc7\x51\xcf\x7a\xa0\x19\x9e\x12\x09\x71\x33\x35\xfc\xa1\xe4\x5b\x7f\x92\x34\x6f\x8d\x29\x3b\x65\x2b\xee\xe5\xe8\xd8\x05\xec\x41\x53\x59\xc0\x6e\xa9\x49\x09\x39\x45\xf5\xb2\xdd\x2b\xad\x52\xfe\x73\x4b\xe8\x26\x50\x85\x2c\x94\x08\x37\xfb\x22\x93\xc3\xf7\x9a\x12\xbd\xf6\x9c\x44\x98\x86\x86\x95\xf0\xd7\x5f\x6e\x6a\xd5\xb4\xe6\x0e\x5a\xea\x48\x16\xf6\xfc\xb1\x58\x45\x33\x37\xd6\x74\x5a\xd5\x05\x7d\xe4\xc6\xdf\xc8\x0b\x3c\x2c\x67\xf7\xd6\xf2\x11\x3e\xa3\x47\x18\x51\xdf\xe8\xab\xbe\x1e\x9a\x9c\xd6\x6d\x0c\xde\xf5\x77\xd2\x08\xd1\xb2\x27\x9a\x90\x5a\x4c\xfb\xa7\xd3\xba\xd4\xf5\x41\x2b\x8d\x87\xe3\x95\x13\xd6\x07\xaf\x34\xee\x8f\x57\xac\x33\x26\xf7\xc5\x59\x7f\x6f\xf5\xb5\xc2\xe4\x55\x1f\xb9\x95\xd9\x77\xcb\x41\x77\x53\xa4\xb5\x3d\xfb\x67\x8d\x60\x54\xb1\xb8\x7e\xd5\x02\x23\xb0\x79\xab\x30\xc1\x9b\x2d\xfb\xa7\x68\xfe\x80\x75\x22\x0d\x28\x8d\xe9\x5b\x64\xc2\x31\xd9\x0d\x42\xd9\x9b\x8d\xc9\xae\x3f\x4a\x26\xc5\x26\xb7\xd9\xc1\x01\x7e\x64\xcb\xa0\x67\x07\xfd\xfd\xf4\x50\xbc\xea\x55\xd8\x7d\x4a\x1d\xdf\x2d\x96\x68\xf6\xb7\x9d\x3b\xae\x1e\x8f\x61\x89\xee\xd0\x12\xd9\x13\xb4\xca\x33\x4a\x71\x61\x61\xc3\xfa\x61\x9a\xaa\xfe\xc4\x5a\x4d\xac\x69\x8a\x0d\x53\x34\x47\x0e\x82\x15\xca\x05\xf9\x44\xfa\x56\x1d\xae\x66\xec\x95\xd3\x9d\xd0\x5b\xf5\xab\x33\x1d\xfd\xe4\xe3\x91\x05\x54\x0f\x7d\x33\x83\x57\x35\xa8\xc6\x5f\x08\x56\x11\xee\x00\xae\x0f\xd2\xdb\x37\x86\xd7\xcd\xe6\x91\xe9\xcc\x97\x1a\x43\x2f\xeb\x65\x67\x27\x5a\x3d\x07\xc7\x0c\xf6\x20\x72\xcb\x26\x3d\x6b\xff\x9e\xe8\x8b\x6c\x48\xa2\xf2\x4f\x87\xbd\x49\xe8\x91\x7e\xb7\xa6\xd1\xd7\x0a\x43\x06\xfa\xe4\xc8\xea\xd7\x6b\x23\x79\x4b\x27\x77\xf3\xd5\x2b\x04\xbd\xa1\x9a\x78\xd1\xbb\xeb\x0e\x2f\xf2\x8d\x35\x3c\x64\xb5\x12\x58\x91\xf3\xca\xd2\xc0\xfd\xeb\x54\x02\xba\xaf\xbf\x06\x2e\x70\xef\xa0\xf5\x03\x49\x3d\xb7\xca\x0f\x24\x74\x80\xbe\x9b\x09\x39\x5e\x37\xf4\xe7\xf8\xdc\xa2\x38\x60\x4b\x3f\xb0\x61\x4d\xb7\x88\xb7\x74\xc5\x80\xdb\xcb\xeb\x2d\xf0\xac\x82\x30\x20\xd2\x62\x94\xce\x38\x65\x03\x3a\x60\xc0\x84\xed\xeb\x82\x93\xd4\xfc\xdc\x83\xd4\x71\x11\x3d\x75\x61\xff\x0f\x00\x00\xff\xff\x30\x73\xd9\xa5\x0f\x1f\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 7951, mode: os.FileMode(420), modTime: time.Unix(1493260136, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres/1_init.sql": postgres1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

